name: Deploy to Web Server

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # Checkout repozytorium
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Docker Buildx (przydatne do budowy obrazów)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Logowanie do GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}   
          password: ${{ secrets.GHCR_TOKEN }}  

      # Budowanie obrazu Docker
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/mstefn/portfolio_app:latest .

      # Pushowanie obrazu do GitHub Container Registry
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/mstefn/portfolio_app:latest

      # Pobranie publicznego IP GitHub Actions Runnera
      - name: Get public IP of GitHub runner
        id: ip
        run: echo "ipv4=$(curl -s https://api.ipify.org)" >> $GITHUB_OUTPUT

      # Dodanie IP GitHub Actions Runnera do Security Group
      - name: Add GitHub Actions IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --security-group-id sg-03799e3dac333e17e \ # Podano ID grupy bezpieczeństwa na sztywno
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      # Ustawienie klucza SSH i konfiguracja połączenia z serwerem
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.WEB01_HOST }} >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.WEB_SERVER_USER }}@${{ secrets.WEB01_HOST }} 'echo "SSH connection established"'

      # Zatrzymywanie istniejących kontenerów na serwerze
      - name: Stop running containers
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.WEB_SERVER_USER }}@${{ secrets.WEB01_HOST }} 'docker-compose -f /home/ec2-user/portfolio-deploy/docker-compose.yml down'

      # Pobieranie nowego obrazu Docker z GHCR na serwerze
      - name: Pull Docker image from GHCR on Web Server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.WEB_SERVER_USER }}@${{ secrets.WEB01_HOST }} 'docker pull ghcr.io/mstefn/portfolio_app:latest'

      # Uruchomienie nowego kontenera na serwerze
      - name: Deploy the app on Web Server
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.WEB_SERVER_USER }}@${{ secrets.WEB01_HOST }} 'docker-compose -f /home/ec2-user/portfolio-deploy/docker-compose.yml up -d'

      # Usuwanie IP GitHub Actions Runnera z Security Group po zakończeniu zadania
      - name: Remove GitHub Actions IP from Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
            --security-group-id sg-03799e3dac333e17e \ # Podano ID grupy bezpieczeństwa na sztywno
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
